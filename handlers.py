import telebot
from config import API_TOKEN, PRODUCTS, ADMIN_ID
from keyboards import get_main_menu, get_store_menu, get_product_menu, get_main_menu_button, get_work_with_us_keyboard
from utils import generate_order_number, log_confirmation
from telebot.types import ForceReply
import sqlite3

bot = telebot.TeleBot(API_TOKEN)

def init_db():
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()

    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS orders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            product_id TEXT NOT NULL,
            key TEXT UNIQUE,
            product_price TEXT NOT NULL,
            order_number TEXT NOT NULL UNIQUE,
            status TEXT DEFAULT 'pending'
        )
    ''')

    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∫–ª—é—á–µ–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS keys (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            product_id TEXT NOT NULL,
            key TEXT NOT NULL UNIQUE
        )
    ''')

    conn.commit()
    conn.close()

init_db()

def add_order(user_id, product_id, product_price, order_number):
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞
        cursor.execute('SELECT key FROM keys WHERE product_id = ? LIMIT 1', (product_id,))
        key_result = cursor.fetchone()
        if not key_result:
            raise ValueError("‚ùå–ó–ê–ö–û–ù–ß–ò–í–°–Ø!!")

        key = key_result[0]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ key —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π
        if not isinstance(key, str):
            raise ValueError("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞.")

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ —Å –∫–ª—é—á–æ–º
        cursor.execute('''
            INSERT INTO orders (user_id, product_id, product_price, order_number, key)
            VALUES (?, ?, ?, ?, ?)
        ''', (user_id, product_id, product_price, order_number, key))

        conn.commit()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ add_order: {e}")  # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        raise e  # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–∞–ª—å—à–µ
    finally:
        conn.close()

def get_order(order_number):
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM orders WHERE order_number = ?', (order_number,))
    order = cursor.fetchone()
    conn.close()
    return order

def update_order_status(order_number, status):
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    try:
        cursor.execute('UPDATE orders SET status = ? WHERE order_number = ?', (status, order_number))
        conn.commit()
        print(f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {order_number} –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ {status}")  # –õ–æ–≥–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞: {e}")  # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
    finally:
        conn.close()

def add_key(product_id, key):
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute('INSERT INTO keys (product_id, key) VALUES (?, ?)', (product_id, key))
    conn.commit()
    conn.close()

def delete_key(key):
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute('DELETE FROM keys WHERE key = ?', (key,))
    conn.commit()
    conn.close()

def get_key(product_id):
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute('SELECT key FROM keys WHERE product_id = ? LIMIT 1', (product_id,))
    key = cursor.fetchone()
    conn.close()
    return key[0] if key else None  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª—é—á –∏–ª–∏ None, –µ—Å–ª–∏ –∫–ª—é—á–µ–π –Ω–µ—Ç

@bot.message_handler(commands=['start'])
def main_menu(message):
    photo_url = 'https://ibb.co/Y3cNMDn'
    welcome_text = """–ü—Ä–∏–≤–µ—Ç! \n–¢—ã –ø–æ–ø–∞–ª –≤ –º–∞–≥–∞–∑–∏–Ω –∫–ª—é—á–µ–π."""
    bot.send_photo(chat_id=message.chat.id, photo=photo_url, caption=welcome_text, reply_markup=get_main_menu()
    )

@bot.callback_query_handler(func=lambda call: call.data == "contact_admin")
def contact_admin_handler(call):
    bot.send_message(
        call.message.chat.id,
        "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:",
        reply_markup=ForceReply(selective=True)
    )
    bot.register_next_step_handler(call.message, forward_to_admin)

def forward_to_admin(message):
    try:
        bot.send_message(
            ADMIN_ID,
            f"‚úâÔ∏è *–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:*\n"
            f"ID: `{message.from_user.id}`\n"
            f"Username: @{message.from_user.username}\n"
            f"–¢–µ–∫—Å—Ç:\n```\n{message.text}\n```",
            parse_mode="Markdown"
        )
        bot.reply_to(
            message,
            "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!",
            reply_markup=get_main_menu_button()  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
        )
    except Exception as e:
        bot.reply_to(
            message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu_button()
        )

@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    if call.data == "show_store":
        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=get_store_menu())
    elif call.data == "work_with_us":
        bot.send_message(
            call.message.chat.id,
            "üöÄ *–†–∞–±–æ—Ç–∞ —Å –Ω–∞–º–∏*\n\n"
            "–ú—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –Ω–æ–≤—ã–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º! –ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ, "
            "–°–≤—è–∂–∏—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            parse_mode="Markdown",
            reply_markup=get_work_with_us_keyboard()
        )
    elif call.data.startswith("view_product_"):
        product_index = int(call.data.split("_")[2])
        product = PRODUCTS[product_index]
        bot.send_photo(
            call.message.chat.id,
            photo=product["photo_url"],
            caption=f"{product['name']}\n{product['description']}\n–¶–µ–Ω–∞: {product['price']}",
            reply_markup=get_product_menu(product_index),
        )
    elif call.data.startswith("buy_product_"):
        product_index = int(call.data.split("_")[2])
        product = PRODUCTS[product_index]
        order_number = generate_order_number()

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–∞
            key = get_key(product["id"])
            if not key:
                bot.send_message(call.message.chat.id, "‚ùå–°–æ—Ä–µ, –∑–∞–∫–æ–Ω—á–∏–≤—Å—è (")
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            add_order(
                user_id=call.message.chat.id,
                product_id=product["id"],
                product_price=product["price"],
                order_number=order_number
            )
        except ValueError as e:
            bot.send_message(call.message.chat.id, str(e))
            return
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")  # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –≤ –∫–æ–Ω—Å–æ–ª—å
            bot.send_message(call.message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        try:
            bot.send_message(
                ADMIN_ID,
                f"üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n\n"
                f"–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {call.message.chat.id}\n"
                f"–¢–æ–≤–∞—Ä: {product['name']}\n"
                f"–¶–µ–Ω–∞: {product['price']}\n"
                f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_number}\n\n"
                "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É, –æ—Ç–ø—Ä–∞–≤–∏–≤:\n"
                f"/confirm {call.message.chat.id} {order_number}",
                parse_mode="Markdown"
            )
        except Exception as e:
            bot.send_message(call.message.chat.id,
                             "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        bot.send_message(
            call.message.chat.id,
            f"üìã –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ {product['price']} –Ω–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã.\n\n"
            f"üí≥ *–†–µ–∫–≤–∏–∑–∏—Ç—ã:* 1234 5678 9012 3456\n\n"
            f"üìå –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–ª–∞—Ç–µ–∂—É: *{order_number}*\n"
            f"–ò–Ω–∞—á–µ –º—ã –Ω–µ —Å–º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ–≥–æ."
            "\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –¥–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            parse_mode="Markdown",
            reply_markup=get_main_menu()
        )
    elif call.data == "back_to_main":
        bot.answer_callback_query(call.id)
        main_menu(call.message)

@bot.message_handler(commands=['confirm'])
def confirm_payment(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        _, user_id, order_number = message.text.split()
        user_id = int(user_id)

        # –ò—â–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        order = get_order(order_number)
        if not order:
            bot.reply_to(message, "‚ùå –ó–∞–∫–∞–∑ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if order[1] != user_id:  # order[1] ‚Äî —ç—Ç–æ user_id
            bot.reply_to(message, "‚ùå –≠—Ç–æ—Ç –∑–∞–∫–∞–∑ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        print(f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: {order[6]}")  # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        if order[6] != "pending":
            bot.reply_to(message, "‚ùå –≠—Ç–æ—Ç –∑–∞–∫–∞–∑ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –∏–∑ –∑–∞–∫–∞–∑–∞
        key = order[3]  # order[3] ‚Äî —ç—Ç–æ key
        if not key:
            bot.reply_to(message, "‚ùå –ö–ª—é—á –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.send_message(
            order[1],  # order[1] ‚Äî —ç—Ç–æ user_id
            f"üéâ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n–í–∞—à –∫–ª—é—á: {key}\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!",
            parse_mode="Markdown",
            reply_markup=get_main_menu_button()
        )

        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        username = bot.get_chat(order[1]).username
        log_confirmation(order[1], username, order[4], order[5], key, order_number)
        # order[4] ‚Äî product_price, order[5] ‚Äî order_number
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        bot.reply_to(
            message,
            f"‚úÖ –ü–æ–∫—É–ø–∞—Ç–µ–ª—é {order[1]} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç–æ–≤–∞—Ä: {order_number},\n –¶–µ–Ω–∞: {order[4]}.",
            parse_mode="Markdown"
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        update_order_status(order_number, "completed")
        delete_key(key)
    except ValueError:
        bot.reply_to(message, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /confirm [user_id] [order_number]")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")